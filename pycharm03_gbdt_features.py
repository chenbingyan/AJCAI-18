import xgboost as xgb
import lightgbm as lgb
import numpy as np
import pandas as pd
from sklearn.metrics import auc, roc_auc_score
from sklearn.preprocessing import OneHotEncoder
# from pycharm02_feature_engineering import read_data,feature_engineer

def gbdt_model(data, numerical_features):
    target = 'is_trade'
    train = data[data.day < 24]
    validation = data[data.day == 24]
    all_train = data[data.day < 25]

    clf = xgb.XGBClassifier(
        learning_rate= 0.1,
        max_depth= 3,
        n_estimators= 16,
        subsample= 0.8,
        objective= 'binary:logistic',
        alpha = 0.1,
        gamma= 1,
        silent= 1,
        verbose_eval = True
    )
    # 训练24号以前的数据
    clf.fit(train[numerical_features], train[target], eval_metric='auc', verbose=True, \
            eval_set=[(validation[numerical_features], validation[target])], early_stopping_rounds=100)
    # 预测及AUC
    y_pred_test = clf.predict_proba(validation[numerical_features])[:, 1]
    xgb_test_auc = roc_auc_score(validation[target], y_pred_test)
    print('xgboost test auc: %.5f' % xgb_test_auc)

    # 训练全部数据
    clf.fit(all_train[numerical_features], all_train[target])

    # xgboost 编码原有特征
    data_train_leaves = clf.apply(data[numerical_features])
    data_train_leaves = data_train_leaves.astype(np.int64)

    (rows, cols) = data_train_leaves.shape
    print('shape of data_train_leaves: ', data_train_leaves.shape)
    print('--------------------------------')

    print('Transform features generated by xgboost...')
    # 对所有的特征进行one-hot编码
    onehot = OneHotEncoder()
    onehot.fit(data_train_leaves)
    data_train_leaves_encode = onehot.transform(data_train_leaves)
    print('data_train_leaves_encode:', data_train_leaves_encode.shape)
    (rows, cols) = data_train_leaves_encode.shape
    data_train_leaves_encode = data_train_leaves_encode.toarray()
    columns = {}
    for i in range(cols):
        columns[i]='gbdt_' + str(i)
    data_train_leaves_encode_df = pd.DataFrame(data_train_leaves_encode).rename(columns=columns)

    return data_train_leaves_encode_df

'''
if __name__ == '__main__':
    data, train, test = read_data('./data/round1_ijcai_18_train_20180301.txt', \
                                  './data/round1_ijcai_18_test_a_20180301.txt')

    data, train, test = feature_engineer(data, train, test)

    numerical_features = ['shop_review_positive_rate', 'shop_score_service', 'shop_score_delivery',
                          'shop_score_description', 'item_id_history_ctr', 'shop_id_history_ctr']
    data_train_leaves_encode = gbdt_model(data, numerical_features)
'''